import logging
import json
import os
import asyncio
import traceback
from datetime import datetime, timezone

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes

from services.stats_service import generate_topic_analytics
from database.models import User, Topic, Question, TestResult, Achievement, Notification

from config import ADMINS
import logging
from database.models import BotSettings
from database.db_manager import get_session

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from keyboards.admin_kb import (
    admin_main_keyboard, admin_topics_keyboard, admin_question_type_keyboard,
    admin_edit_topics_keyboard, admin_edit_topic_keyboard, admin_settings_keyboard,
    admin_questions_count_keyboard, admin_reports_keyboard, admin_users_keyboard,
    admin_confirm_delete_keyboard, admin_parent_actions_keyboard, admin_confirm_delete_user_keyboard,
    admin_student_actions_keyboard
)

logger = logging.getLogger(__name__)


def get_db_dialect():
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ª–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (PostgreSQL –∏–ª–∏ SQLite)"""
    try:
        with get_session() as session:
            from sqlalchemy import inspect
            connection = session.connection()
            inspector = inspect(connection)
            dialect_name = inspector.engine.dialect.name.lower()
            return dialect_name
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –¥–∏–∞–ª–µ–∫—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º SQLite –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "sqlite"


async def show_topics_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    query = update.callback_query

    try:
        with get_session() as session:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö
            topics_data = []
            for topic in session.query(Topic).all():
                topics_data.append({
                    "id": topic.id,
                    "name": topic.name,
                    "description": topic.description
                })

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º
        topics_text = "‚úèÔ∏è *–¢–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"

        if not topics_data:
            topics_text += "–°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ç–µ–º—É."
        else:
            for topic in topics_data:
                topics_text += f"‚Ä¢ *{topic['name']}*\n"
                if topic['description']:
                    topics_text += f"  _{topic['description']}_\n"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = admin_edit_topics_keyboard(topics_data)

        await query.edit_message_text(
            topics_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error in show_topics_list: {e}")
        await query.edit_message_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {str(e)}\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
        )

def get_setting(key: str, default=None):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª—é—á—É"""
    try:
        with get_session() as session:
            setting = session.query(BotSettings).filter(BotSettings.key == key).first()
            if setting:
                return setting.value
            return default
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
        return default


def set_setting(key: str, value):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    try:
        with get_session() as session:
            setting = session.query(BotSettings).filter(BotSettings.key == key).first()
            if setting:
                setting.value = str(value)
            else:
                setting = BotSettings(key=key, value=str(value))
                session.add(setting)
            session.commit()
            return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {key}: {e}")
        return False


def get_quiz_settings():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ—Å—Ç–∞"""
    questions_count = int(get_setting("default_questions_count", "10"))

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    if questions_count <= 10:
        time_limit = 5 * 60  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    elif questions_count <= 15:
        time_limit = 10 * 60  # 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    else:
        time_limit = 20 * 60  # 20 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    return {
        "questions_count": questions_count,
        "time_limit": time_limit,
        "time_minutes": time_limit // 60
    }


class AdminHandler:
    def __init__(self):
        self.context = None
        self.query = None
        self.quiz_service = None
        self.parent_service = None

    def init_services(self, quiz_service_inst=None, parent_service_inst=None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –∫–ª–∞—Å—Å–µ"""
        if quiz_service_inst:
            self.quiz_service = quiz_service_inst

        if parent_service_inst:
            self.parent_service = parent_service_inst

    async def handle_topic_edit_action(self, update, context, action_type, topic_id):
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º—ã"""
        query = update.callback_query

        with get_session() as session:
            topic = session.query(Topic).get(topic_id)
            if not topic:
                await query.edit_message_text("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return False

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–º—ã, –ø–æ–∫–∞ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
            topic_name = topic.name
            topic_description = topic.description

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–µ–π—Å—Ç–≤–∏–π
            if action_type == "name":
                await query.edit_message_text(
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã '{topic_name}':\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data["admin_state"] = "editing_topic_name"
                context.user_data["editing_topic_id"] = topic_id
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ editing_topic_name –¥–ª—è —Ç–µ–º—ã {topic_id}")

            elif action_type == "desc":
                await query.edit_message_text(
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–µ–º—ã '{topic_name}':\n\n"
                    f"–¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {topic_description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data["admin_state"] = "editing_topic_description"
                context.user_data["editing_topic_id"] = topic_id
                logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ editing_topic_description –¥–ª—è —Ç–µ–º—ã {topic_id}")

            elif action_type == "delete":
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Ç–µ–º–æ–π
                questions_count = session.query(Question).filter(Question.topic_id == topic_id).count()

                warning_text = ""
                if questions_count > 0:
                    warning_text = f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ö —ç—Ç–æ–π —Ç–µ–º–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                reply_markup = admin_confirm_delete_keyboard(topic_id)

                await query.edit_message_text(
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É '{topic_name}'?{warning_text}",
                    reply_markup=reply_markup
                )
            else:
                return False

        return True

    async def export_to_excel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /export_excel –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Excel"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) not in ADMINS:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö."
            )
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        keyboard = [
            [
                InlineKeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤", callback_data="admin_export_results"),
                InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º", callback_data="admin_export_topics")
            ],
            [
                InlineKeyboardButton("üë®‚Äçüéì –ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–æ–≤", callback_data="admin_export_students"),
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
            ]
        ]

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
            reply_markup=reply_markup
        )

    async def show_problematic_questions(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if str(user_id) not in ADMINS:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            from services.stats_service import get_problematic_questions
            result = get_problematic_questions(limit=10)

            if not result["success"]:
                await query.edit_message_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {result['message']}"
                )
                return

            if not result.get("has_data", False):
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_topic_stats")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö. –í–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ—Å—Ç–æ–≤.",
                    reply_markup=reply_markup
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏
            problematic_questions = result["problematic_questions"]

            text = "üî¥ *–°–∞–º—ã–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n"

            for i, question in enumerate(problematic_questions, 1):
                short_question = question["question_text"][:50] + "..." if len(question["question_text"]) > 50 else \
                    question["question_text"]
                text += f"{i}. *{short_question}*\n"
                text += f"   –¢–µ–º–∞: {question['topic_name']}\n"
                text += f"   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {question['error_rate']}%\n"
                text += f"   –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {question['total_answers']}\n\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            keyboard = [
                [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑", callback_data="admin_question_analysis")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", callback_data="admin_topic_stats")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )

            # –ï—Å–ª–∏ –µ—Å—Ç—å –≥—Ä–∞—Ñ–∏–∫, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            if "chart" in result and result["chart"]:
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=result["chart"],
                    caption="üìä –¢–æ–ø-5 —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫)"
                )

        except Exception as e:
            logger.error(f"Error in show_problematic_questions: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}"
            )

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) not in ADMINS:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = admin_main_keyboard()

        await update.message.reply_text(
            "üë®‚Äçüíª *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    async def show_topics_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query

        try:
            with get_session() as session:
                # –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∫–∞ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
                topics_data = []
                for topic in session.query(Topic).all():
                    # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
                    topics_data.append({
                        "id": topic.id,
                        "name": topic.name,
                        "description": topic.description,
                        # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    })
                # –°–µ—Å—Å–∏—è –∑–∞–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ with –±–ª–æ–∫–∞

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º
            topics_text = "‚úèÔ∏è *–¢–µ–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"

            if not topics_data:
                topics_text += "–°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ç–µ–º—É."
            else:
                for topic in topics_data:
                    topics_text += f"‚Ä¢ *{topic['name']}*\n"
                    if topic.get('description'):
                        topics_text += f"  _{topic['description']}_\n"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            reply_markup = admin_edit_topics_keyboard(topics_data)

            await query.edit_message_text(
                topics_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Error in show_topics_list: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ç–µ–º: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )

    async def add_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_question –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) not in ADMINS:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤."
            )
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –≤—ã–±–æ—Ä–∞
        with get_session() as session:
            topics = session.query(Topic).all()
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            topics_data = [{"id": topic.id, "name": topic.name} for topic in topics]

        if not topics:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin -> –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã."
            )
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = admin_topics_keyboard(topics_data)

        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
            reply_markup=reply_markup
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data["admin_state"] = "adding_question"

    async def show_student_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, student_id: int) -> None:
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–Ω–∏–∫–µ"""
        query = update.callback_query

        try:
            with get_session() as session:
                student = session.query(User).get(student_id)

                if not student or student.role != "student":
                    await query.edit_message_text("–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± —É—á–µ–Ω–∏–∫–µ
                name = student.full_name or student.username or f"–£—á–µ–Ω–∏–∫ {student.id}"
                telegram_id = student.telegram_id
                created_at = student.created_at.strftime('%d.%m.%Y %H:%M') if student.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                last_active = student.last_active.strftime('%d.%m.%Y %H:%M') if student.last_active else "–ù–∏–∫–æ–≥–¥–∞"

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤
                test_count = session.query(TestResult).filter(TestResult.user_id == student.id).count()

                # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                achievements_count = session.query(Achievement).filter(Achievement.user_id == student.id).count()

                # –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–∏
                parents = []
                for parent in student.parents:
                    parent_name = parent.full_name or parent.username or f"–†–æ–¥–∏—Ç–µ–ª—å {parent.id}"
                    parents.append(parent_name)

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                details_text = f"üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ*\n\n"
                details_text += f"*–ò–º—è:* {name}\n"
                details_text += f"*Telegram ID:* {telegram_id}\n"
                details_text += f"*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {created_at}\n"
                details_text += f"*–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {last_active}\n\n"

                details_text += f"*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
                details_text += f"‚Ä¢ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {test_count}\n"
                details_text += f"‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {achievements_count}\n\n"

                details_text += f"*–°–≤—è–∑–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª–∏ ({len(parents)}):*\n"
                if parents:
                    for parent_name in parents:
                        details_text += f"‚Ä¢ {parent_name}\n"
                else:
                    details_text += "–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π\n"

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —É—á–µ–Ω–∏–∫–æ–º
                reply_markup = admin_student_actions_keyboard(student_id)

                await query.edit_message_text(
                    details_text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"Error in show_student_details: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—á–µ–Ω–∏–∫–µ: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )

    async def show_parent_details(self, update: Update, context: ContextTypes.DEFAULT_TYPE, parent_id: int) -> None:
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–¥–∏—Ç–µ–ª–µ"""
        query = update.callback_query

        try:
            with get_session() as session:
                parent = session.query(User).get(parent_id)

                if not parent or parent.role != "parent":
                    await query.edit_message_text("–†–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–æ–¥–∏—Ç–µ–ª–µ
                name = parent.full_name or parent.username or f"–†–æ–¥–∏—Ç–µ–ª—å {parent.id}"
                telegram_id = parent.telegram_id
                created_at = parent.created_at.strftime('%d.%m.%Y %H:%M') if parent.created_at else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                last_active = parent.last_active.strftime('%d.%m.%Y %H:%M') if parent.last_active else "–ù–∏–∫–æ–≥–¥–∞"

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                settings = {}
                if parent.settings:
                    try:
                        settings = json.loads(parent.settings)
                    except json.JSONDecodeError:
                        settings = {}

                # –°–≤—è–∑–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∏
                children = []
                for child in parent.children:
                    child_name = child.full_name or child.username or f"–£—á–µ–Ω–∏–∫ {child.id}"
                    children.append((child.id, child_name))

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                details_text = f"üìã *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–æ–¥–∏—Ç–µ–ª–µ*\n\n"
                details_text += f"*–ò–º—è:* {name}\n"
                details_text += f"*Telegram ID:* {telegram_id}\n"
                details_text += f"*–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:* {created_at}\n"
                details_text += f"*–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:* {last_active}\n\n"

                details_text += f"*–°–≤—è–∑–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∏ ({len(children)}):*\n"
                if children:
                    for _, child_name in children:
                        details_text += f"‚Ä¢ {child_name}\n"
                else:
                    details_text += "–ù–µ—Ç —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤\n"

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ä–æ–¥–∏—Ç–µ–ª–µ–º
                reply_markup = admin_parent_actions_keyboard(parent_id)

                await query.edit_message_text(
                    details_text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"Error in show_parent_details: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–æ–¥–∏—Ç–µ–ª–µ: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )

    async def confirm_delete_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int,
                                  user_type: str) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query

        try:
            with get_session() as session:
                user = session.query(User).get(user_id)

                if not user:
                    await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                name = user.full_name or user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_type_text = "—É—á–µ–Ω–∏–∫–∞" if user_type == "student" else "—Ä–æ–¥–∏—Ç–µ–ª—è"

                # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                warning_text = ""
                if user_type == "student":
                    # –î–ª—è —É—á–µ–Ω–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    test_count = session.query(TestResult).filter(TestResult.user_id == user.id).count()
                    achievements_count = session.query(Achievement).filter(Achievement.user_id == user.id).count()
                    parents_count = len(user.parents)

                    if test_count > 0 or achievements_count > 0 or parents_count > 0:
                        warning_text += "\n\n‚ö†Ô∏è –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞ –±—É–¥—É—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã:\n"
                        if test_count > 0:
                            warning_text += f"‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã {test_count} —Ç–µ—Å—Ç–æ–≤\n"
                        if achievements_count > 0:
                            warning_text += f"‚Ä¢ {achievements_count} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\n"
                        if parents_count > 0:
                            warning_text += f"‚Ä¢ –°–≤—è–∑–∏ —Å {parents_count} —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏\n"

                elif user_type == "parent":
                    # –î–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
                    children_count = len(user.children)

                    if children_count > 0:
                        warning_text += "\n\n‚ö†Ô∏è –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–æ–¥–∏—Ç–µ–ª—è –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã —Å–≤—è–∑–∏ —Å —É—á–µ–Ω–∏–∫–∞–º–∏. –°–∞–º–∏ —É—á–µ–Ω–∏–∫–∏ –∏ –∏—Ö –¥–∞–Ω–Ω—ã–µ –Ω–µ –±—É–¥—É—Ç –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã."

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                confirm_text = f"‚ùì –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å {user_type_text} *{name}*?{warning_text}\n\n"
                confirm_text += "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å."

                # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                reply_markup = admin_confirm_delete_user_keyboard(user_id, user_type)

                await query.edit_message_text(
                    confirm_text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"Error in confirm_delete_user: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ —É–¥–∞–ª–µ–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )

    async def delete_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int,
                          user_type: str) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—Å–µ—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        query = update.callback_query

        try:
            user_name = None
            success = False

            with get_session() as session:
                user = session.query(User).get(user_id)
                if not user:
                    await query.edit_message_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
                user_name = user.full_name or user.username or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id}"

                # –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if user_type == "student":
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ ID —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    test_result_ids = [r.id for r in
                                       session.query(TestResult).filter(TestResult.user_id == user.id).all()]

                    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã 'question_result'
                    if test_result_ids:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π SQL –∑–∞–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ —Ç–∞–±–ª–∏—Ü–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫ Table, –∞ –Ω–µ –∫–ª–∞—Å—Å
                        from sqlalchemy import text
                        for test_id in test_result_ids:
                            session.execute(
                                text("DELETE FROM question_result WHERE test_result_id = :test_id"),
                                {"test_id": test_id}
                            )
                        # –ò–ª–∏ —É–¥–∞–ª—è–µ–º –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                        # placeholders = ','.join([':id'+str(i) for i in range(len(test_result_ids))])
                        # params = {f'id{i}': id_val for i, id_val in enumerate(test_result_ids)}
                        # session.execute(
                        #     text(f"DELETE FROM question_result WHERE test_result_id IN ({placeholders})"),
                        #     params
                        # )

                    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
                    session.query(TestResult).filter(TestResult.user_id == user.id).delete()

                    # –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
                    session.query(Achievement).filter(Achievement.user_id == user.id).delete()

                    # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    session.query(Notification).filter(Notification.user_id == user.id).delete()

                    # –Ø–≤–Ω–æ –æ—Ç–≤—è–∑—ã–≤–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å foreign key
                    for parent in user.parents:
                        parent.children.remove(user)

                elif user_type == "parent":
                    # –£–¥–∞–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    session.query(Notification).filter(Notification.user_id == user.id).delete()

                    # –Ø–≤–Ω–æ –æ—Ç–≤—è–∑—ã–≤–∞–µ–º –¥–µ—Ç–µ–π
                    user.children = []

                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                session.flush()

                # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                session.delete(user)
                session.commit()
                success = True

            if success and user_name:
                user_type_text = "–£—á–µ–Ω–∏–∫" if user_type == "student" else "–†–æ–¥–∏—Ç–µ–ª—å"
                await query.edit_message_text(
                    f"‚úÖ {user_type_text} *{user_name}* —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –≤–º–µ—Å—Ç–µ —Å–æ –≤—Å–µ–º–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.",
                    parse_mode="Markdown"
                )

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–ø–∏—Å–∫—É –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –ø–∞—É–∑—ã
                await asyncio.sleep(2)
                if user_type == "student":
                    await self.show_students_list(update, context)
                else:
                    await self.show_parents_list(update, context)
            else:
                await query.edit_message_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )

        except Exception as e:
            logger.error(f"Error in delete_user: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )

    async def import_questions(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /import –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) not in ADMINS:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤."
            )
            return

        await update.message.reply_text(
            "–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n\n"
            "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É:\n"
            "```\n"
            "{\n"
            '  "topic": {\n'
            '    "id": 1,\n'
            '    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã",\n'
            '    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"\n'
            "  },\n"
            '  "questions": [\n'
            "    {\n"
            '      "id": 1,\n'
            '      "text": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",\n'
            '      "options": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", ...],\n'
            '      "correct_answer": [0],\n'
            '      "question_type": "single",\n'
            '      "difficulty": 1,\n'
            '      "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"\n'
            "    },\n"
            "    ...\n"
            "  ]\n"
            "}\n"
            "```\n\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –∏ –≤—ã–±–µ—Ä–∏—Ç–µ '–ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤'.",
            parse_mode="Markdown"
        )

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data["admin_state"] = "importing_questions"

    async def show_results_dynamics(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ –¥–∏–Ω–∞–º–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        query = update.callback_query
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if str(user_id) not in ADMINS:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏–Ω–∞–º–∏–∫–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
            with get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
                from datetime import datetime, timedelta
                month_ago = datetime.utcnow() - timedelta(days=30)

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
                results = session.query(TestResult).filter(
                    TestResult.completed_at >= month_ago
                ).order_by(TestResult.completed_at).all()

                if not results:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")]]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await query.edit_message_text(
                        "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ç–µ—Å—Ç–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü.",
                        reply_markup=reply_markup
                    )
                    return

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –¥–Ω—è–º
                import pandas as pd
                results_data = []
                for result in results:
                    results_data.append({
                        "date": result.completed_at.date(),
                        "percentage": result.percentage
                    })

                df = pd.DataFrame(results_data)
                daily_avg = df.groupby("date")["percentage"].mean().reset_index()

                # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
                import matplotlib.pyplot as plt
                from io import BytesIO

                fig, ax = plt.subplots(figsize=(10, 6))
                ax.plot(daily_avg["date"], daily_avg["percentage"], marker='o', linestyle='-')

                ax.set_title("–î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü")
                ax.set_xlabel("–î–∞—Ç–∞")
                ax.set_ylabel("–°—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç")
                ax.grid(True)
                plt.xticks(rotation=45)
                plt.tight_layout()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –≤ –±—É—Ñ–µ—Ä
                img_buf = BytesIO()
                plt.savefig(img_buf, format='png')
                img_buf.seek(0)
                plt.close()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                text = "üìà *–î–∏–Ω–∞–º–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
                text += f"‚Ä¢ –ü–µ—Ä–∏–æ–¥: –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π\n"
                text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {len(results)}\n"
                text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {df['percentage'].mean():.1f}%\n"

                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç—Ä–µ–Ω–¥ (—É–ª—É—á—à–µ–Ω–∏–µ –∏–ª–∏ —É—Ö—É–¥—à–µ–Ω–∏–µ)
                if len(daily_avg) > 1:
                    first_week = df[df["date"] <= df["date"].min() + timedelta(days=7)]["percentage"].mean()
                    last_week = df[df["date"] >= df["date"].max() - timedelta(days=7)]["percentage"].mean()
                    trend_diff = last_week - first_week

                    if abs(trend_diff) > 0.1:
                        trend_text = "—É–ª—É—á—à–µ–Ω–∏–µ" if trend_diff > 0 else "—É—Ö—É–¥—à–µ–Ω–∏–µ"
                        text += f"‚Ä¢ –¢—Ä–µ–Ω–¥: {trend_text} –Ω–∞ {abs(trend_diff):.1f}%\n"

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
                await context.bot.send_photo(
                    chat_id=user_id,
                    photo=img_buf,
                    caption="–î–∏–Ω–∞–º–∏–∫–∞ —Å—Ä–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –¥–Ω—è–º"
                )

        except Exception as e:
            logger.error(f"Error in show_results_dynamics: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
                ]])
            )

    async def show_question_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if str(user_id) not in ADMINS:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
            return

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            from services.stats_service import get_problematic_questions
            result = get_problematic_questions(limit=20)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

            if not result["success"]:
                await query.edit_message_text(
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {result['message']}"
                )
                return

            if not result.get("has_data", False):
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_problematic_questions")]]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await query.edit_message_text(
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞. –í–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –Ω–µ –±—ã–ª–æ –ø—Ä–æ–π–¥–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ—Å—Ç–æ–≤.",
                    reply_markup=reply_markup
                )
                return

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º
            problematic_questions = result["problematic_questions"]

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —É—Ä–æ–≤–Ω—é –æ—à–∏–±–æ–∫
            problematic_questions.sort(key=lambda q: q["error_rate"], reverse=True)

            text = "üîç *–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤*\n\n"
            text += "–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–æ–ø—Ä–æ—Å–æ–≤, –≤—ã–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞–∏–±–æ–ª—å—à–∏–µ –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–∏—è —É —É—á–µ–Ω–∏–∫–æ–≤.\n\n"

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–º–∞–º
            topics_data = {}
            for question in problematic_questions:
                topic_id = question["topic_id"]
                if topic_id not in topics_data:
                    topics_data[topic_id] = {
                        "name": question["topic_name"],
                        "questions": [],
                        "avg_error_rate": 0
                    }
                topics_data[topic_id]["questions"].append(question)

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
            for topic_id, topic_data in topics_data.items():
                if topic_data["questions"]:
                    topic_data["avg_error_rate"] = sum(q["error_rate"] for q in topic_data["questions"]) / len(
                        topic_data["questions"])

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–º—ã –ø–æ —Å—Ä–µ–¥–Ω–µ–º—É –ø—Ä–æ—Ü–µ–Ω—Ç—É –æ—à–∏–±–æ–∫
            sorted_topics = sorted(topics_data.items(), key=lambda x: x[1]["avg_error_rate"], reverse=True)

            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º
            text += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º:*\n"
            for topic_id, topic_data in sorted_topics:
                topic_name = topic_data["name"]
                avg_error = topic_data["avg_error_rate"]
                questions_count = len(topic_data["questions"])

                text += f"‚Ä¢ *{topic_name}*: {avg_error:.1f}% –æ—à–∏–±–æ–∫ (–≤—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {questions_count})\n"

            text += "\n*–¢–æ–ø-10 —Å–∞–º—ã—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤:*\n"
            for i, question in enumerate(problematic_questions[:10], 1):
                short_question = question["question_text"][:50] + "..." if len(question["question_text"]) > 50 else \
                question["question_text"]
                text += f"{i}. *{short_question}*\n"
                text += f"   –¢–µ–º–∞: {question['topic_name']}\n"
                text += f"   –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫: {question['error_rate']}%\n"
                text += f"   –í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤: {question['total_answers']}\n\n"

            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
            text += "*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            text += "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–µ–º—ã —Å –≤—ã—Å–æ–∫–∏–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –æ—à–∏–±–æ–∫\n"
            text += "‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ —Å–ª–æ–∂–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
            text += "‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º\n"
            text += "‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —Å–ª–æ–∂–Ω—ã–º —Ç–µ–º–∞–º\n"

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º –≤–æ–ø—Ä–æ—Å–∞–º", callback_data="admin_problematic_questions")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )

        except Exception as e:
            logger.error(f"Error in show_question_analysis: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {str(e)}",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_problematic_questions")
                ]])
            )

    async def handle_admin_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≤ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        global new_state
        query = update.callback_query
        callback_data = query.data
        user_id = update.effective_user.id

        logger.debug(f"Processing button {callback_data} from user {user_id}")

        await query.answer()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ callback-–¥–∞–Ω–Ω—ã—Ö
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {query.data}")

        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) not in ADMINS:
            await query.edit_message_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
            if query.data == "admin_problematic_questions":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                await self.show_problematic_questions(update, context)

            elif query.data == "admin_results_dynamics":
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–Ω–∞–º–∏–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                await self.show_results_dynamics(update, context)



            elif query.data == "admin_export":
                keyboard = [
                    [
                        InlineKeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤", callback_data="admin_export_results"),
                        InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º", callback_data="admin_export_topics")
                    ],
                    [
                        InlineKeyboardButton("üë®‚Äçüéì –ü—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–æ–≤", callback_data="admin_export_students"),
                        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:",
                    reply_markup=reply_markup
                )
            elif query.data == "admin_topic_stats":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º
                await self.show_topic_stats(update, context)

            elif query.data == "admin_users":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                await self.show_users_list(update, context)

            elif query.data == "admin_edit_topics":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                await show_topics_list(update, context)

            elif query.data == "admin_add_question":
                # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤–æ–ø—Ä–æ—Å–∞
                with get_session() as session:
                    topics = session.query(Topic).all()
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã –≤ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                    topics_data = [{"id": topic.id, "name": topic.name} for topic in topics]

                if not topics_data:
                    await query.edit_message_text(
                        "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã'."
                    )
                    return

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                reply_markup = admin_topics_keyboard(topics_data)

                await query.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
                    reply_markup=reply_markup
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data["admin_state"] = "adding_question"

            elif query.data == "admin_import":
                # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏–º–ø–æ—Ä—Ç—É –≤–æ–ø—Ä–æ—Å–æ–≤
                await query.edit_message_text(
                    "–î–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ JSON —Ñ–∞–π–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏.\n\n"
                    "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—É:\n"
                    "```\n"
                    "{\n"
                    '  "topic": {\n'
                    '    "id": 1,\n'
                    '    "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã",\n'
                    '    "description": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"\n'
                    "  },\n"
                    '  "questions": [\n'
                    "    {\n"
                    '      "id": 1,\n'
                    '      "text": "–¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",\n'
                    '      "options": ["–í–∞—Ä–∏–∞–Ω—Ç 1", "–í–∞—Ä–∏–∞–Ω—Ç 2", ...],\n'
                    '      "correct_answer": [0],\n'
                    '      "question_type": "single",\n'
                    '      "difficulty": 1,\n'
                    '      "explanation": "–û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"\n'
                    "    },\n"
                    "    ...\n"
                    "  ]\n"
                    "}\n"
                    "```\n\n"
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —ç—Ç–æ—Ç —á–∞—Ç.",
                    parse_mode="Markdown"
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data["admin_state"] = "importing_questions"


            elif query.data.startswith("admin_export_"):
                export_action = query.data.replace("admin_export_", "")

                if export_action == "results":
                    # –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
                    keyboard = [
                        [
                            InlineKeyboardButton("–ó–∞ –Ω–µ–¥–µ–ª—é", callback_data="admin_export_results_week"),
                            InlineKeyboardButton("–ó–∞ –º–µ—Å—è—Ü", callback_data="admin_export_results_month")
                        ],
                        [
                            InlineKeyboardButton("–ó–∞ –≥–æ–¥", callback_data="admin_export_results_year"),
                            InlineKeyboardButton("–ó–∞ –≤—Å—ë –≤—Ä–µ–º—è", callback_data="admin_export_results_all")
                        ],
                        [
                            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")
                        ]
                    ]

                    reply_markup = InlineKeyboardMarkup(keyboard)

                    await query.edit_message_text(
                        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤:",
                        reply_markup=reply_markup
                    )
                elif export_action == "topics":
                    # –°—Ä–∞–∑—É —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º
                    await self.handle_export_button(update, context, "topics")
                elif export_action == "students":
                    # –°—Ä–∞–∑—É —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —É—á–µ–Ω–∏–∫–æ–≤
                    await self.handle_export_button(update, context, "students")
                elif export_action.startswith("results_"):
                    # –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥
                    period = export_action.replace("results_", "")
                    await self.handle_export_button(update, context, "results", period)

            elif query.data.startswith("admin_edit_topics_"):

                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –±–µ–∑ —Å—É—Ñ—Ñ–∏–∫—Å–æ–≤ name/desc

                if not any(x in query.data for x in ["name_", "desc_"]):

                    topic_id = int(query.data.replace("admin_edit_topics_", ""))

                    with get_session() as session:

                        topic = session.query(Topic).get(topic_id)

                        if not topic:
                            await query.edit_message_text(
                                "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                            )
                            return
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                        reply_markup = admin_edit_topic_keyboard(topic_id)
                        await query.edit_message_text(
                            f"*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã:* {topic.name}\n\n"
                            f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {topic.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
                            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                            reply_markup=reply_markup,
                            parse_mode="Markdown"
                        )


            elif query.data == "admin_back_topics_list":
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º
                await self.show_topics_list(update, context)

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º - —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
            elif query.data.startswith("admin_edit_topic_name_"):
                topic_id = int(query.data.replace("admin_edit_topic_name_", ""))
                logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã —Å ID {topic_id}")
                await self.handle_topic_edit_action(update, context, "name", topic_id)
            elif query.data.startswith("admin_edit_topic_desc_"):
                topic_id = int(query.data.replace("admin_edit_topic_desc_", ""))
                logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–º—ã —Å ID {topic_id}")
                await self.handle_topic_edit_action(update, context, "desc", topic_id)

            elif query.data.startswith("admin_delete_topic_"):
                topic_id = int(query.data.replace("admin_delete_topic_", ""))
                logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã —Å ID {topic_id}")
                with get_session() as session:
                    topic = session.query(Topic).get(topic_id)
                    if not topic:
                        await query.edit_message_text("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                        return
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ç–µ–º—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤
                    topic_name = topic.name
                    questions_count = session.query(Question).filter(Question.topic_id == topic_id).count()
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                reply_markup = admin_confirm_delete_keyboard(topic_id)
                warning_text = ""
                if questions_count > 0:
                    warning_text = f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ö —ç—Ç–æ–π —Ç–µ–º–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
                await query.edit_message_text(
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É '{topic_name}'?{warning_text}",
                    reply_markup=reply_markup

                )

            elif query.data == "admin_settings":
                # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
                await self.show_bot_settings(update, context)

            elif query.data == "admin_setting_questions_count":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ
                reply_markup = admin_questions_count_keyboard()
                await query.edit_message_text(
                    "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–æ—Ç 5 –¥–æ 20):",
                    reply_markup=reply_markup
                )


            elif query.data == "admin_setting_reports":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è–º
                from config import ENABLE_PARENT_REPORTS
                current_state = "–≤–∫–ª—é—á–µ–Ω—ã" if ENABLE_PARENT_REPORTS else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
                reply_markup = admin_reports_keyboard()
                await query.edit_message_text(
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è–º —Å–µ–π—á–∞—Å {current_state}.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )

            elif query.data == "admin_setting_questions_count":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ
                from services.settings_service import get_setting
                default_questions_count = get_setting("default_questions_count", "10")
                reply_markup = admin_questions_count_keyboard()
                await query.edit_message_text(
                    f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: {default_questions_count}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤:",
                    reply_markup=reply_markup
                )

            elif query.data.startswith("admin_reports_"):
                # –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
                action = query.data.replace("admin_reports_", "")

                try:
                    # –ó–¥–µ—Å—å –∫–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                    # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ config —Ñ–∞–π–ª–∞
                    import os
                    from dotenv import load_dotenv, set_key
                    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env
                    env_path = os.path.join(os.path.dirname(__file__), '..', '.env')
                    new_state = "–≤–∫–ª—é—á–µ–Ω—ã" if action == "enable" else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
                    if os.path.exists(env_path):
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        set_key(env_path, "ENABLE_PARENT_REPORTS", "true" if action == "enable" else "false")

                        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
                        load_dotenv(override=True)

                        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                        from config import ENABLE_PARENT_REPORTS
                        new_state = "–≤–∫–ª—é—á–µ–Ω—ã" if action == "enable" else "–æ—Ç–∫–ª—é—á–µ–Ω—ã"

                        await query.edit_message_text(
                            f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è–º {new_state}.\n\n"
                            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞.",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
                            ]])
                        )

                    else:
                        # –ï—Å–ª–∏ —Ñ–∞–π–ª .env –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
                        await query.edit_message_text(
                            "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
                            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏–∑–º–µ–Ω–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ ENABLE_PARENT_REPORTS –≤—Ä—É—á–Ω—É—é –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
                            reply_markup=InlineKeyboardMarkup([[
                                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
                            ]])
                        )
                except Exception as e:
                    logger.error(f"Error changing parent reports setting: {e}")
                    await query.edit_message_text(
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")
                        ]])
                    )

                    await query.edit_message_text(
                        f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è–º {new_state}.\n\n"
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
                        ]])
                    )

            elif query.data.startswith("admin_set_questions_"):
                # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
                count = query.data.replace("admin_set_questions_", "")

                try:
                    from services.settings_service import set_setting
                    set_setting("default_questions_count", count)

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
                    questions_count = int(count)
                    if questions_count <= 10:
                        time_minutes = 5
                    elif questions_count <= 15:
                        time_minutes = 10
                    else:
                        time_minutes = 20

                    await query.edit_message_text(
                        f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {count}.\n"
                        f"–í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {time_minutes} –º–∏–Ω—É—Ç.\n\n"
                        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—É–¥–µ—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ –∫ –Ω–æ–≤—ã–º —Ç–µ—Å—Ç–∞–º.",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="admin_settings")
                        ]])
                    )
                except Exception as e:
                    logger.error(f"Error setting questions count: {e}")
                    await query.edit_message_text(
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {str(e)}",
                        reply_markup=InlineKeyboardMarkup([[
                            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_settings")
                        ]])
                    )

            elif query.data.startswith("admin_select_topic_"):
                # –í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
                topic_id = int(query.data.replace("admin_select_topic_", ""))
                context.user_data["selected_topic_id"] = topic_id

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
                reply_markup = admin_question_type_keyboard()

                await query.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞:",
                    reply_markup=reply_markup
                )

            elif query.data.startswith("admin_question_type_"):
                # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
                question_type = query.data.replace("admin_question_type_", "")
                context.user_data["question_type"] = question_type

                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
                await query.edit_message_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data["admin_state"] = "entering_question_text"

            elif query.data == "admin_question_analysis":
                await self.show_question_analysis(update, context)

            elif query.data == "admin_back_main":
                # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await self.show_admin_panel(update, context)

            elif query.data == "admin_back_topics":
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º
                with get_session() as session:
                    topics = session.query(Topic).all()
                    topics_data = [{"id": topic.id, "name": topic.name} for topic in topics]

                if not topics:
                    await query.edit_message_text(
                        "–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–º—ã'."
                    )
                    return

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                reply_markup = admin_topics_keyboard(topics_data)

                await query.edit_message_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
                    reply_markup=reply_markup
                )

            elif query.data == "admin_add_topic":
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã
                await query.edit_message_text(
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã\n"
                    "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã"
                )

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                context.user_data["admin_state"] = "adding_topic"

            elif query.data.startswith("admin_edit_topic_"):
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º—ã
                topic_id = int(query.data.replace("admin_edit_topic_", ""))

                with get_session() as session:
                    topic = session.query(Topic).get(topic_id)

                    if not topic:
                        await query.edit_message_text(
                            "–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
                        )
                        return

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    reply_markup = admin_edit_topics_keyboard(topic_id)

                    await query.edit_message_text(
                        f"*–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã:* {topic.name}\n\n"
                        f"*–û–ø–∏—Å–∞–Ω–∏–µ:* {topic.description or '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}\n\n"
                        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )

            elif query.data == "admin_back_topics_list":
                # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º
                await show_topics_list(update, context)

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º
            elif query.data.startswith("admin_edit_topics_desc_"):
                topic_id = int(query.data.replace("admin_edit_topics_desc_", ""))
                logger.info(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–º—ã —Å ID {topic_id}")
                await self.handle_topic_edit_action(update, context, "desc", topic_id)


            elif query.data.startswith("admin_delete_topic_"):
                topic_id = int(query.data.replace("admin_delete_topic_", ""))

                logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–º—ã —Å ID {topic_id}")

                with get_session() as session:
                    topic = session.query(Topic).get(topic_id)
                    if not topic:
                        await query.edit_message_text("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                        return

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–æ–π —Ç–µ–º–æ–π
                    questions_count = session.query(Question).filter(Question.topic_id == topic_id).count()

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                reply_markup = admin_confirm_delete_keyboard(topic_id)

                warning_text = ""
                if questions_count > 0:
                    warning_text = f"\n‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –ö —ç—Ç–æ–π —Ç–µ–º–µ –ø—Ä–∏–≤—è–∑–∞–Ω–æ {questions_count} –≤–æ–ø—Ä–æ—Å–æ–≤. –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."

                await query.edit_message_text(
                    f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ–º—É '{topic.name}'?{warning_text}",
                    reply_markup=reply_markup
                )



            elif query.data.startswith("admin_confirm_delete_topic_"):
                topic_id = int(query.data.replace("admin_confirm_delete_topic_", ""))
                logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ–º—ã —Å ID {topic_id}")
                try:
                    topic_name = None
                    with get_session() as session:
                        topic = session.query(Topic).get(topic_id)
                        if not topic:
                            await query.edit_message_text("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                            return
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ç–µ–º—ã –¥–æ —É–¥–∞–ª–µ–Ω–∏—è
                        topic_name = topic.name
                        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã —ç—Ç–æ–π —Ç–µ–º—ã
                        session.query(Question).filter(Question.topic_id == topic_id).delete()
                        # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º—É —Ç–µ–º—É
                        session.delete(topic)
                        session.commit()
                    if topic_name:
                        await query.edit_message_text(f"‚úÖ –¢–µ–º–∞ '{topic_name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
                        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º —Å–ø–∏—Å–∫–∞ —Ç–µ–º
                        await asyncio.sleep(2)
                        await show_topics_list(update, context)
                    else:
                        await query.edit_message_text("–¢–µ–º–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
                        await show_topics_list(update, context)

                except Exception as e:
                    logger.error(f"Error deleting topic: {e}")
                    await query.edit_message_text(
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {str(e)}\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    )

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            elif query.data == "admin_list_students":
                await self.show_students_list(update, context)

            elif query.data == "admin_list_parents":
                await self.show_parents_list(update, context)

            # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
            elif query.data.startswith("admin_view_student_"):
                student_id = int(query.data.replace("admin_view_student_", ""))
                await self.show_student_details(update, context, student_id)

            # –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
            elif query.data.startswith("admin_view_parent_"):
                parent_id = int(query.data.replace("admin_view_parent_", ""))
                await self.show_parent_details(update, context, parent_id)

            # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
            elif query.data.startswith("admin_delete_student_"):
                student_id = int(query.data.replace("admin_delete_student_", ""))
                await self.confirm_delete_user(update, context, student_id, "student")

            # –î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
            elif query.data.startswith("admin_delete_parent_"):
                parent_id = int(query.data.replace("admin_delete_parent_", ""))
                await self.confirm_delete_user(update, context, parent_id, "parent")

            # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
            elif query.data.startswith("admin_confirm_delete_student_"):
                student_id = int(query.data.replace("admin_confirm_delete_student_", ""))
                await self.delete_user(update, context, student_id, "student")

            # –î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
            elif query.data.startswith("admin_confirm_delete_parent_"):
                parent_id = int(query.data.replace("admin_confirm_delete_parent_", ""))
                await self.delete_user(update, context, parent_id, "parent")


        except Exception as e:
            logger.error(f"Error in handle_admin_button: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}"
            )

    async def handle_export_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE, export_type: str,
                                   period: str = None) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        query = update.callback_query
        user_id = update.effective_user.id

        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å —ç–∫—Å–ø–æ—Ä—Ç–∞
            from services.excel_export_service import ExcelExportService
            excel_service = ExcelExportService()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
            generating_msg = await query.edit_message_text("‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Excel-—Ñ–∞–π–ª–∞... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if export_type == "results":
                buffer = excel_service.export_test_results(period or "all")
                filename = f"test_results_{period or 'all'}_{datetime.now(timezone.utc).strftime('%Y%m%d')}.xlsx"
            elif export_type == "topics":
                buffer = excel_service.export_topic_statistics()
                filename = f"topic_statistics_{datetime.now(timezone.utc).strftime('%Y%m%d')}.xlsx"
            elif export_type == "students":
                buffer = excel_service.export_student_progress()
                filename = f"student_progress_{datetime.now(timezone.utc).strftime('%Y%m%d')}.xlsx"
            else:
                await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–∫—Å–ø–æ—Ä—Ç–∞.")
                return

            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            await generating_msg.delete()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await context.bot.send_document(
                chat_id=user_id,
                document=buffer,
                filename=filename,
                caption=f"üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö: {export_type}\n{datetime.now(timezone.utc).strftime('%d.%m.%Y %H:%M')}"
            )

        except Exception as e:
            logger.error(f"Error exporting to Excel: {e}")
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {str(e)}"
            )

    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤)"""
        user_id = update.effective_user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) not in ADMINS:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
        if context.user_data.get("admin_state") != "importing_questions":
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document = update.message.document
        if not document.file_name.endswith('.json'):
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON."
            )
            return

        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            file_path = f"downloads/{document.file_name}"
            os.makedirs("downloads", exist_ok=True)
            await file.download_to_drive(file_path)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
            with open(file_path, 'r', encoding='utf-8') as f:
                data = json.load(f)

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
            result = self.import_questions_from_json(data)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(file_path)

            if result["success"]:
                await update.message.reply_text(
                    f"‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                    f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ç–µ–º–∞: {result['topic_name']}\n"
                    f"‚Ä¢ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {result['questions_count']}"
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {result['message']}"
                )

        except Exception as e:
            logger.error(f"Error importing questions: {e}")
            await update.message.reply_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}"
            )

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data.pop("admin_state", None)

    async def handle_admin_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, state=None) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        user_id = update.effective_user.id
        message_text = update.message.text

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if str(user_id) not in ADMINS:
            await update.message.reply_text(
                "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏."
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        state = context.user_data.get("admin_state", None)
        logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {state}")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º
        if state == "editing_topic_name":
            topic_id = context.user_data.get("editing_topic_id")
            new_name = message_text.strip()

            if not new_name or len(new_name) < 3:
                await update.message.reply_text(
                    "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return

            try:
                with get_session() as session:
                    topic = session.query(Topic).get(topic_id)
                    if not topic:
                        await update.message.reply_text("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                        context.user_data.pop("admin_state", None)
                        context.user_data.pop("editing_topic_id", None)
                        return

                    old_name = topic.name
                    topic.name = new_name
                    session.commit()

                await update.message.reply_text(f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ —Å '{old_name}' –Ω–∞ '{new_name}'.")

                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop("admin_state", None)
                context.user_data.pop("editing_topic_id", None)

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–º
                with get_session() as session:
                    topics = session.query(Topic).all()
                    topics_data = [{"id": topic.id, "name": topic.name} for topic in topics]

                reply_markup = admin_edit_topics_keyboard(topics_data)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º
                await update.message.reply_text(
                    "‚úèÔ∏è –°–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    reply_markup=reply_markup
                )

            except Exception as e:
                logger.error(f"Error updating topic name: {e}")
                await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã: {str(e)}")
                context.user_data.pop("admin_state", None)
                context.user_data.pop("editing_topic_id", None)

        elif state == "editing_topic_description":
            topic_id = context.user_data.get("editing_topic_id")
            new_description = message_text.strip()
            try:
                with get_session() as session:
                    topic = session.query(Topic).get(topic_id)
                    if not topic:
                        await update.message.reply_text("–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
                        context.user_data.pop("admin_state", None)
                        context.user_data.pop("editing_topic_id", None)
                        return

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –∏ —Å—Ç–∞—Ä–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, –ø–æ–∫–∞ —Å–µ—Å—Å–∏—è –∞–∫—Ç–∏–≤–Ω–∞
                    topic_name = topic.name
                    old_description = topic.description or "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"

                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                    topic.description = new_description
                    session.commit()

                    logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã {topic_id} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ")

                await update.message.reply_text(
                    f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ–º—ã '{topic_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ."

                )
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                context.user_data.pop("admin_state", None)
                context.user_data.pop("editing_topic_id", None)

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ–º
                with get_session() as session:
                    topics = session.query(Topic).all()
                    topics_data = [{"id": topic.id, "name": topic.name} for topic in topics]

                reply_markup = admin_edit_topics_keyboard(topics_data)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–º

                await update.message.reply_text(
                    "‚úèÔ∏è –°–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    reply_markup=reply_markup

                )

            except Exception as e:
                logger.error(f"Error updating topic description: {e}")
                await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–µ–º—ã: {str(e)}")
                context.user_data.pop("admin_state", None)
                context.user_data.pop("editing_topic_id", None)


        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        elif state == "entering_question_text":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
            context.user_data["question_text"] = message_text

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            await update.message.reply_text(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ù–∞–ø—Ä–∏–º–µ—Ä:\n\n"
                "–í–∞—Ä–∏–∞–Ω—Ç 1\n"
                "–í–∞—Ä–∏–∞–Ω—Ç 2\n"
                "–í–∞—Ä–∏–∞–Ω—Ç 3"
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data["admin_state"] = "entering_options"

        elif state == "entering_options":
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
            options = [opt.strip() for opt in message_text.split('\n') if opt.strip()]

            if len(options) < 2:
                await update.message.reply_text(
                    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
            context.user_data["options"] = options

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
            question_type = context.user_data.get("question_type", "single")

            if question_type == "single":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
                options_text = "\n".join([f"{i + 1}. {opt}" for i, opt in enumerate(options)])

                await update.message.reply_text(
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç 1 –¥–æ {len(options)}):\n\n{options_text}"
                )

                context.user_data["admin_state"] = "entering_correct_answer_single"

            elif question_type == "multiple":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
                options_text = "\n".join([f"{i + 1}. {opt}" for i, opt in enumerate(options)])

                await update.message.reply_text(
                    f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1,3,4):\n\n{options_text}"
                )

                context.user_data["admin_state"] = "entering_correct_answer_multiple"

            elif question_type == "sequence":
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ —Å –Ω–æ–º–µ—Ä–∞–º–∏
                options_text = "\n".join([f"{i + 1}. {opt}" for i, opt in enumerate(options)])

                await update.message.reply_text(
                    f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3,1,4,2):\n\n{options_text}"
                )

                context.user_data["admin_state"] = "entering_correct_answer_sequence"

        elif state == "entering_correct_answer_single":
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ –∏–Ω–¥–µ–∫—Å (—Å —É—á–µ—Ç–æ–º, —á—Ç–æ –Ω—É–º–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1)
                answer_index = int(message_text.strip()) - 1
                options = context.user_data.get("options", [])

                if answer_index < 0 or answer_index >= len(options):
                    await update.message.reply_text(
                        f"–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len(options)}."
                    )
                    return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                context.user_data["correct_answer"] = [answer_index]

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞):"
                )

                context.user_data["admin_state"] = "entering_explanation"

            except ValueError:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )

        elif state == "entering_correct_answer_multiple":
            try:
                # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã
                answer_indices = [int(idx.strip()) - 1 for idx in message_text.split(',')]
                options = context.user_data.get("options", [])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤
                for idx in answer_indices:
                    if idx < 0 or idx >= len(options):
                        await update.message.reply_text(
                            f"–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {idx + 1}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ {len(options)}."
                        )
                        return

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                context.user_data["correct_answer"] = answer_indices

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞):"
                )

                context.user_data["admin_state"] = "entering_explanation"

            except ValueError:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )

        elif state == "entering_correct_answer_sequence":
            try:
                # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∏–Ω–¥–µ–∫—Å—ã
                sequence = [int(idx.strip()) - 1 for idx in message_text.split(',')]
                options = context.user_data.get("options", [])

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
                if len(sequence) != len(options) or len(set(sequence)) != len(options):
                    await update.message.reply_text(
                        f"–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –¥–ª—è –≤—Å–µ—Ö {len(options)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
                    )
                    return

                for idx in sequence:
                    if idx < 0 or idx >= len(options):
                        await update.message.reply_text(
                            f"–£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä: {idx + 1}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ {len(options)}."
                        )
                        return

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–æ–º —Ö—Ä–∞–Ω–µ–Ω–∏—è
                sequence_str = [str(idx) for idx in sequence]

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                context.user_data["correct_answer"] = sequence_str

                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                await update.message.reply_text(
                    "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ù–µ—Ç' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ —ç—Ç–æ–≥–æ —à–∞–≥–∞):"
                )

                context.user_data["admin_state"] = "entering_explanation"

            except ValueError:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )

        elif state == "entering_explanation":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ "–ù–µ—Ç"
            explanation = None if message_text.lower() == "–Ω–µ—Ç" else message_text

            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞
            question_data = {
                "topic_id": context.user_data.get("selected_topic_id"),
                "text": context.user_data.get("question_text"),
                "options": context.user_data.get("options"),
                "correct_answer": context.user_data.get("correct_answer"),
                "question_type": context.user_data.get("question_type"),
                "explanation": explanation
            }

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
            result = self.add_question_to_db(question_data)

            if result["success"]:
                await update.message.reply_text(
                    "‚úÖ –í–æ–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
                )

                # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—á–µ—Ç –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å
                keyboard = [
                    [
                        InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="admin_add_question"),
                        InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="admin_back_main")
                    ]
                ]

                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {result['message']}"
                )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop("admin_state", None)

        elif state == "adding_topic":
            # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
            lines = message_text.strip().split('\n')

            if not lines:
                await update.message.reply_text(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã."
                )
                return

            # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã
            topic_name = lines[0].strip()

            # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å) - –æ–ø–∏—Å–∞–Ω–∏–µ
            topic_description = '\n'.join(lines[1:]).strip() if len(lines) > 1 else None

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
            result = self.add_topic_to_db(topic_name, topic_description)

            if result["success"]:
                await update.message.reply_text(
                    f"‚úÖ –¢–µ–º–∞ '{topic_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!"
                )

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–µ–º
                with get_session() as session:
                    topics = session.query(Topic).all()
                    topics_data = [{"id": topic.id, "name": topic.name} for topic in topics]

                reply_markup = admin_edit_topics_keyboard(topics_data)

                await update.message.reply_text(
                    "‚úèÔ∏è –°–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
                    reply_markup=reply_markup
                )
            else:
                await update.message.reply_text(
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–º—ã: {result['message']}"
                )

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            context.user_data.pop("admin_state", None)

        else:
            await update.message.reply_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )

    def import_questions_from_json(self, data: dict) -> dict:
        """–ò–º–ø–æ—Ä—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if "topic" not in data or "questions" not in data:
                return {"success": False, "message": "–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON. –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª—è 'topic' –∏ 'questions'."}

            topic_data = data["topic"]
            questions_data = data["questions"]

            with get_session() as session:
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–º—É
                topic = session.query(Topic).filter(Topic.id == topic_data.get("id")).first()

                if not topic:
                    # –ï—Å–ª–∏ —Ç–µ–º—ã —Å —Ç–∞–∫–∏–º ID –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                    topic = Topic(
                        name=topic_data["name"],
                        description=topic_data.get("description", "")
                    )
                    session.add(topic)
                    session.flush()  # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
                else:
                    # –ï—Å–ª–∏ —Ç–µ–º–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ—ë
                    topic.name = topic_data["name"]
                    topic.description = topic_data.get("description", topic.description)

                # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
                questions_count = 0
                for q_data in questions_data:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≤–æ–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –≤ —ç—Ç–æ–π —Ç–µ–º–µ
                    question = session.query(Question).filter(
                        Question.topic_id == topic.id,
                        Question.id == q_data.get("id")
                    ).first()

                    if not question:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                        options = q_data["options"]
                        correct_answer = q_data["correct_answer"]
                        question = Question(
                            topic_id=topic.id,
                            text=q_data["text"],
                            options=json.dumps(options) if not isinstance(options, str) else options,
                            correct_answer=json.dumps(correct_answer) if not isinstance(correct_answer,
                                                                                        str) else correct_answer,
                            question_type=q_data["question_type"],
                            difficulty=q_data.get("difficulty", 1),
                            media_url=q_data.get("media_url"),
                            explanation=q_data.get("explanation", "")
                        )
                        session.add(question)
                    else:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
                        options = q_data["options"]
                        correct_answer = q_data["correct_answer"]
                        question.text = q_data["text"]
                        question.options = json.dumps(options) if not isinstance(options, str) else options
                        question.correct_answer = json.dumps(correct_answer) if not isinstance(correct_answer,
                                                                                               str) else correct_answer
                        question.question_type = q_data["question_type"]
                        question.difficulty = q_data.get("difficulty", question.difficulty)
                        question.media_url = q_data.get("media_url", question.media_url)
                        question.explanation = q_data.get("explanation", question.explanation)

                    questions_count += 1

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                session.commit()

                return {
                    "success": True,
                    "topic_name": topic.name,
                    "questions_count": questions_count
                }

        except Exception as e:
            logger.error(f"Error in import_questions_from_json: {e}")
            return {"success": False, "message": str(e)}

    def add_question_to_db(self, data: dict) -> dict:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π
            required_fields = ["topic_id", "text", "options", "correct_answer", "question_type"]
            for field in required_fields:
                if field not in data or data[field] is None:
                    return {"success": False, "message": f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {field}"}

            with get_session() as session:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ–º—ã
                    topic = session.query(Topic).get(data["topic_id"])
                    if not topic:
                        return {"success": False, "message": "–£–∫–∞–∑–∞–Ω–Ω–∞—è —Ç–µ–º–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}

                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
                    question = Question(
                        topic_id=data["topic_id"],
                        text=data["text"],
                        options=json.dumps(data["options"]) if not isinstance(data["options"], str) else data[
                            "options"],
                        correct_answer=json.dumps(data["correct_answer"]) if not isinstance(data["correct_answer"],
                                                                                            str) else data[
                            "correct_answer"],
                        question_type=data["question_type"],
                        difficulty=data.get("difficulty", 1),
                        media_url=data.get("media_url"),
                        explanation=data.get("explanation", "")
                    )

                    session.add(question)
                    session.commit()

                    return {"success": True, "question_id": question.id}
                except Exception as db_error:
                    session.rollback()
                    logger.error(f"Database error in add_question_to_db: {db_error}")
                    return {"success": False, "message": str(db_error)}

        except Exception as e:
            logger.error(f"Error in add_question_to_db: {e}")
            return {"success": False, "message": str(e)}

    def add_topic_to_db(self, name: str, description: str = None) -> dict:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ–º—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
            if not name or len(name.strip()) < 3:
                return {"success": False, "message": "–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–º—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞"}

            with get_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è
                existing_topic = session.query(Topic).filter(Topic.name == name).first()
                if existing_topic:
                    return {"success": False, "message": f"–¢–µ–º–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"}

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ–º—É
                topic = Topic(
                    name=name,
                    description=description
                )

                session.add(topic)
                session.commit()

                return {"success": True, "topic_id": topic.id}

        except Exception as e:
            logger.error(f"Error in add_topic_to_db: {e}")
            return {"success": False, "message": str(e)}

    async def show_admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        query = update.callback_query

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = admin_main_keyboard()

        await query.edit_message_text(
            "üë®‚Äçüíª *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    async def show_topic_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–µ–º–∞–º"""
        query = update.callback_query

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ–º–∞–º
        stats = generate_topic_analytics()

        if not stats["success"]:
            await query.edit_message_text(
                f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stats['message']}\n\n"
                "–ù–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        if not stats["has_data"]:
            await query.edit_message_text(
                "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ, —á—Ç–æ–±—ã —É—á–µ–Ω–∏–∫–∏ –ø—Ä–æ—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–µ—Å—Ç.\n\n"
                "–ù–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        try:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            stats_text = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–µ–º–∞–º*\n\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∏ –ø—Ä–æ—Å—Ç—ã—Ö —Ç–µ–º–∞—Ö
            topic_stats = stats["topic_stats"]
            stats_text += "*–°–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–º (–æ—Ç —Å–∞–º–æ–π —Å–ª–æ–∂–Ω–æ–π –∫ —Å–∞–º–æ–π –ø—Ä–æ—Å—Ç–æ–π):*\n"

            for i, topic in enumerate(topic_stats):
                emoji = "üî¥" if i < 2 else "üü°" if i < len(topic_stats) - 2 else "üü¢"
                stats_text += f"{emoji} {topic['topic_name']}: {topic['avg_score']}% (–ø—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {topic['tests_count']})\n"

            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
            keyboard = [
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="admin_back_main")]
            ]

            reply_markup = InlineKeyboardMarkup(keyboard)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await query.edit_message_text(
                stats_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫
            if "chart" in stats:
                await context.bot.send_photo(
                    chat_id=update.effective_user.id,
                    photo=stats["chart"],
                    caption="üìä –°—Ä–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ —Ç–µ–º–∞–º (–æ—Ç —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∫ —Å–∞–º—ã–º –ø—Ä–æ—Å—Ç—ã–º)"
                )
        except Exception as e:
            logger.error(f"Error in show_topic_stats: {e}")
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )

    async def show_users_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        query = update.callback_query

        try:
            with get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                students_count = session.query(User).filter(User.role == "student").count()
                parents_count = session.query(User).filter(User.role == "parent").count()
                admins_count = session.query(User).filter(User.role == "admin").count()

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                # –í–∞–∂–Ω–æ: —Å–æ–∑–¥–∞–µ–º –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö, –∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ä–µ–∫—Ç—ã —Å–µ—Å—Å–∏–∏ –Ω–∞–ø—Ä—è–º—É—é
                recent_users = []
                for user in session.query(User).order_by(User.last_active.desc()).limit(10).all():
                    recent_users.append({
                        "role": user.role,
                        "full_name": user.full_name,
                        "username": user.username,
                        "telegram_id": user.telegram_id,
                        "last_active": user.last_active
                    })

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            users_text = "üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
            users_text += f"‚Ä¢ –í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {students_count}\n"
            users_text += f"‚Ä¢ –í—Å–µ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {parents_count}\n"
            users_text += f"‚Ä¢ –í—Å–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {admins_count}\n\n"

            users_text += "*–ù–µ–¥–∞–≤–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
            for user_data in recent_users:
                role_emoji = "üë®‚Äçüéì" if user_data["role"] == "student" else "üë®‚Äçüë©‚Äçüëß‚Äçüë¶" if user_data[
                                                                                           "role"] == "parent" else "üë®‚Äçüíª"
                name = user_data["full_name"] or user_data["username"] or f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_data['telegram_id']}"
                last_active = user_data["last_active"].strftime('%d.%m.%Y %H:%M')
                users_text += f"{role_emoji} {name} - {last_active}\n"

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            reply_markup = admin_users_keyboard()

            await query.edit_message_text(
                users_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Error in show_users_list: {e}")
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )

    async def show_bot_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
        query = update.callback_query

        from config import ENABLE_PARENT_REPORTS
        from services.settings_service import get_setting

        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        default_questions_count = get_setting("default_questions_count", "10")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
        questions_count = int(default_questions_count)
        if questions_count <= 10:
            time_minutes = 5
        elif questions_count <= 15:
            time_minutes = 10
        else:
            time_minutes = 20

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        settings_text = "‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
        settings_text += "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞:\n\n"

        settings_text += "*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n"
        settings_text += f"‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç—á–µ—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è–º: {'–í–∫–ª—é—á–µ–Ω–æ' if ENABLE_PARENT_REPORTS else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}\n"
        settings_text += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ç–µ—Å—Ç–µ: {default_questions_count}\n"
        settings_text += f"‚Ä¢ –í—Ä–µ–º—è –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: {time_minutes} –º–∏–Ω—É—Ç\n\n"

        settings_text += "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:"

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        reply_markup = admin_settings_keyboard()

        if query:
            await query.edit_message_text(
                settings_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                settings_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )

    async def show_students_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤"""
        query = update.callback_query

        try:
            with get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
                students = session.query(User).filter(User.role == "student").order_by(User.last_active.desc()).all()

                if not students:
                    await query.edit_message_text(
                        "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                    )
                    return

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–µ–Ω–∏–∫–æ–≤
                students_text = "üë®‚Äçüéì *–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤*\n\n"
                students_text += "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
                keyboard = []
                for student in students:
                    name = student.full_name or student.username or f"–£—á–µ–Ω–∏–∫ {student.id}"
                    last_active = student.last_active.strftime('%d.%m.%Y') if student.last_active else "–ù–∏–∫–æ–≥–¥–∞"

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    students_text += f"‚Ä¢ {name} (ID: {student.telegram_id})\n"
                    students_text += f"  –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}\n\n"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
                    keyboard.append([
                        InlineKeyboardButton(f"üîç {name}", callback_data=f"admin_view_student_{student.id}")
                    ])

                # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard.append([
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")
                ])

                reply_markup = InlineKeyboardMarkup(keyboard)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if len(students_text) > 4096:
                    students_text = students_text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"

                await query.edit_message_text(
                    students_text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"Error in show_students_list: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )

    async def show_parents_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π"""
        query = update.callback_query

        try:
            with get_session() as session:
                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
                parents = session.query(User).filter(User.role == "parent").order_by(User.last_active.desc()).all()

                if not parents:
                    await query.edit_message_text(
                        "–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π.\n\n"
                        "–ù–∞–∂–º–∏—Ç–µ /admin –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
                    )
                    return

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ø–∏—Å–∫–æ–º —Ä–æ–¥–∏—Ç–µ–ª–µ–π
                parents_text = "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ *–°–ø–∏—Å–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª–µ–π*\n\n"
                parents_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
                keyboard = []
                for parent in parents:
                    name = parent.full_name or parent.username or f"–†–æ–¥–∏—Ç–µ–ª—å {parent.id}"
                    last_active = parent.last_active.strftime('%d.%m.%Y') if parent.last_active else "–ù–∏–∫–æ–≥–¥–∞"

                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
                    children_count = len(parent.children)

                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    parents_text += f"‚Ä¢ {name} (ID: {parent.telegram_id})\n"
                    parents_text += f"  –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {last_active}\n"
                    parents_text += f"  –°–≤—è–∑–∞–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤: {children_count}\n\n"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
                    keyboard.append([
                        InlineKeyboardButton(f"üîç {name}", callback_data=f"admin_view_parent_{parent.id}")
                    ])

                # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
                keyboard.append([
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")
                ])

                reply_markup = InlineKeyboardMarkup(keyboard)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if len(parents_text) > 4096:
                    parents_text = parents_text[:4000] + "\n\n... (—Å–ø–∏—Å–æ–∫ –æ–±—Ä–µ–∑–∞–Ω)"

                await query.edit_message_text(
                    parents_text,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"Error in show_parents_list: {e}")
            logger.error(traceback.format_exc())
            await query.edit_message_text(
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π: {str(e)}\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É."
            )

        pass
